name: Build and Test

on: 
  push:
    branches:
      - develop
      - jobsummary
  repository_dispatch:

env:
  azCliVersion: 2.6.0
  location: eastus
  nsg: wls-nsg
  resourceGroupPrefix: wls-${{ github.run_id }}-${{ github.run_number }}
  wlsPassword: ${{ secrets.WLS_PASSWORD }}
    
jobs:
  preflight:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout azure-javaee-iaas
        id: checkout-azure-javaee-iaas
        uses: actions/checkout@v2
        with:
          repository: Azure/azure-javaee-iaas
          path: azure-javaee-iaas
          ref: 6807e2ae3e8a8492edf211b9f4f0b7ed3a2a29e7
      # - name: Checkout Azure Resource Manager Template Toolkit 
      #   id: checkout-arm-ttk
      #   uses: actions/checkout@v2
      #   with:
      #     repository: Azure/arm-ttk
      #     path: arm-ttk
      #     ref: 1b58e01c5f201a819d795dbc3576c2fd7cbed821
      # - name: Checkout arm-oraclelinux-wls
      #   id: checkout-arm-oraclelinux-wls
      #   uses: actions/checkout@v2
      #   with:
      #     path: arm-oraclelinux-wls
      # - name: Set up JDK 1.8
      #   id: set-up-jdk
      #   uses: actions/setup-java@v1
      #   with:
      #     java-version: 1.8
      # - name: Build azure-javaee-iaas
      #   id: build-azure-javaee-iaas
      #   run: mvn -DskipTests clean install --file azure-javaee-iaas/pom.xml
      # - name: Build and test arm-oraclelinux-wls
      #   run: mvn -Ptemplate-validation-tests clean install --file arm-oraclelinux-wls/pom.xml
     
      # - name: Get version information from pom.xml
      #   id: get-version
      #   run: |
      #     version=$(awk '/<version>[^<]+<\/version>/{gsub(/<version>|<\/version>/,"",$1);print $1;exit;}' arm-oraclelinux-wls/pom.xml)
      #     echo "version=${version}" >> $GITHUB_ENV
      # - name: Generate artifact name
      #   id: generate-artifact-name
      #   run: |
      #     echo "artifactName=arm-oraclelinux-wls-$version-arm-assembly" >> $GITHUB_ENV
      # - name: Output artifact name and path
      #   id: artifact_file
      #   run: |
      #    echo "##[set-output name=artifactName;]arm-oraclelinux-wls-$version-arm-assembly"
      #    echo "##[set-output name=artifactPath;]arm-oraclelinux-wls/target/$artifactName"
      
      # - name: Prepare artifact
      #   id: prepare-artifact
      #   if: success()
      #   run: unzip arm-oraclelinux-wls/target/$artifactName.zip -d arm-oraclelinux-wls/target/$artifactName
        
      # - name: Archive ${{steps.artifact_file.outputs.artifactName}}.zip
      #   id: archive-artifact
      #   uses: actions/upload-artifact@v1 
      #   if: success()
      #   with:
      #     name: ${{steps.artifact_file.outputs.artifactName}}
      #     path: ${{steps.artifact_file.outputs.artifactPath}}
  
  deployfail:
    needs: preflight
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
          images: ["owls-122130-jdk8-ol73;Oracle:weblogic-122130-jdk8-ol73:owls-122130-jdk8-ol7;latest", "owls-122130-jdk8-ol74;Oracle:weblogic-122130-jdk8-ol74:owls-122130-jdk8-ol7;latest", "owls-122140-jdk8-ol76;Oracle:weblogic-122140-jdk8-ol76:owls-122140-jdk8-ol7;latest", "owls-141100-jdk8-ol76;Oracle:weblogic-141100-jdk8-ol76:owls-141100-jdk8-ol7;latest", "owls-141100-jdk11-ol76;Oracle:weblogic-141100-jdk11-ol76:owls-141100-jdk11-ol7;latest"]

    steps:
      - name: Checkout arm-oraclelinux-wls-fail
        uses: actions/checkout@v2
        with:
          path: arm-oraclelinux-wls-fail
          repository: Azure/arm-oraclelinux-wls-fail

  deploy:
    needs: preflight
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
          images: ["owls-122130-jdk8-ol73;Oracle:weblogic-122130-jdk8-ol73:owls-122130-jdk8-ol7;latest", "owls-122130-jdk8-ol74;Oracle:weblogic-122130-jdk8-ol74:owls-122130-jdk8-ol7;latest", "owls-122140-jdk8-ol76;Oracle:weblogic-122140-jdk8-ol76:owls-122140-jdk8-ol7;latest", "owls-141100-jdk8-ol76;Oracle:weblogic-141100-jdk8-ol76:owls-141100-jdk8-ol7;latest", "owls-141100-jdk11-ol76;Oracle:weblogic-141100-jdk11-ol76:owls-141100-jdk11-ol7;latest"]

    steps:
      - name: Checkout arm-oraclelinux-wls
        uses: actions/checkout@v2
        with:
          path: arm-oraclelinux-wls
          ref: jobsummary
      # - name: Get version information from arm-oraclelinux-wls/pom.xml
      #   id: version
      #   run: |
      #     version=$(awk '/<version>[^<]+<\/version>/{gsub(/<version>|<\/version>/,"",$1);print $1;exit;}' arm-oraclelinux-wls/pom.xml)
      #     echo "version=${version}" >> $GITHUB_ENV
      # - name: Output artifact name for Download action
      #   id: artifact_file
      #   run: echo "##[set-output name=artifactName;]arm-oraclelinux-wls-$version-arm-assembly"
      # - name: Download artifact for deployment
      #   uses: actions/download-artifact@v1
      #   with:
      #     name: ${{steps.artifact_file.outputs.artifactName}}

      # - uses: azure/login@v1
      #   id: azure-login
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}
      # - name: Get Image SKU
      #   id: image-sku
      #   run: |
      #     imageUrn="${{ matrix.images }}"
      #     sku=${imageUrn%%;*}
      #     echo "sku=${sku}" >> $GITHUB_ENV
      #     echo ${resourceGroupPrefix}
      #     resourceGroup=$(echo "${resourceGroupPrefix}-${sku}" | sed "s/_//g")
      #     echo "resourceGroup=${resourceGroup}" >> $GITHUB_ENV


  summary:
    if: always()
    needs: [deploy,deployfail]
    runs-on: ubuntu-latest
    steps:
      - name: summarize jobs
        run: |
          workflow_jobs=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/zhengchang907/arm-oraclelinux-wls/actions/runs/${{ github.run_id }}/jobs)
          critical_job_num=$(echo $workflow_jobs | jq '.jobs | map(select(.name|test("^deploy."))) | length')
          echo "$critical_job_num"
          succeed_critical_job_num=$(echo $workflow_jobs | jq '.jobs | map(select(.conclusion=="success") | select(.name|test("^deploy."))) | length')
          echo "$succeed_critical_job_num"
          failed_job_num="$(($critical_job_num-$succeed_critical_job_num))"
          echo $failed_job_num
          if (($failed_job_num >= 2));then
              echo "too many jobs failed, send notification to Teams"
              curl ${{ secrets.MSTEAMS_WEBHOOK }} \
              -H 'Content-Type: application/json' \
              --data-binary @- << EOF
              {
              "@context":"http://schema.org/extensions",
              "@type":"MessageCard",
              "text":"$failed_job_num jobs failed in arm-oraclelinux-wls workflow, please take a look at: https://github.com/zhengchang907/arm-oraclelinux-wls/actions/runs/${{ github.run_id }}"
              }
          EOF
          fi
      
      # - name: Create Resource Group
      #   id: create-resource-group
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: ${{ env.azCliVersion }}
      #     inlineScript: |
      #       echo "create resource group" $resourceGroup
      #       az group create --verbose --name $resourceGroup --location ${location}

      # - name: Prepare deployed parameters and test script
      #   id: prepare-deployed-parameters-and-test-script
      #   run: |
      #    sed -i "s/#skuUrnVersion#/${{ matrix.images }}/g; \
      #     s/#location#/$location/g; \
      #     s/#adminPasswordOrKey#/$wlsPassword/g" \
      #     arm-oraclelinux-wls/test/data/parameters-test.json
      #    sed -i "s/#adminPasswordOrKey#/$wlsPassword/g" \
      #     arm-oraclelinux-wls/test/scripts/verify-wls-path.sh

      # - name: Accept Image Terms
      #   id: accept-terms
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: ${{ env.azCliVersion }}
      #     inlineScript: |
      #       echo "accept terms for " "${{ matrix.images }}"
      #       rawUrn="${{ matrix.images }}"
      #       publisherAndName=$(echo ${rawUrn} | grep -o ";.*:" | sed "s/;//g")
      #       imageVersion=${rawUrn##*;}
      #       az vm image terms accept --urn ${publisherAndName}${sku}:${imageVersion}

      # - name: Deploy WebLogic Server Single Node offer
      #   id: deploy-wls
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: ${{ env.azCliVersion }}
      #     inlineScript: |
      #       az group deployment create \
      #         --verbose \
      #         --resource-group ${resourceGroup} \
      #         --name wls-single-node \
      #         --parameters @arm-oraclelinux-wls/test/data/parameters-test.json \
      #         --template-file arm-oraclelinux-wls-$version-arm-assembly/mainTemplate.json

      # - name: Verify Network Security Group
      #   id: verify-nsg
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: ${{ env.azCliVersion }}
      #     inlineScript: |
      #       echo "query nsg name, will exit with error if nsg does not exist."
      #       az network nsg show -g ${resourceGroup} -n ${{ env.nsg }} --query "name"

      # - name: Get IP of build machine
      #   id: get-ip-address
      #   run: |
      #     myIP=$(dig @ns1.google.com TXT o-o.myaddr.l.google.com +short)
      #     echo "myIP=${myIP}" >> $GITHUB_ENV

      # - name: Add ip address to security rule to access the wls machine
      #   id: add-ip-to-security-rule
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: ${{ env.azCliVersion }}
      #     inlineScript: |
      #       echo "query existing source address prefixes"
      #       attempts=0
      #       while [ -z `az network nsg show -g $resourceGroup -n ${nsg} | grep "NRMS-Rule-101"` ] && [ $attempts -lt 20 ];
      #       do
      #         echo "network security group rule NRMS-Rule-101 is not ready"
      #         attempts=$((attempts + 1))
      #         sleep 1m
      #       done

      #       sourceAddressPrefixes=$(az network nsg rule show \
      #         --resource-group ${resourceGroup} \
      #         --nsg-name ${{ env.nsg }} \
      #         --name NRMS-Rule-101 \
      #         --query "sourceAddressPrefixes")
      #       echo "IP of this machine: " ${myIP}
      #       sourceAddressPrefixes=$(echo ${myIP} ${sourceAddressPrefixes} | \
      #         sed 's/,/ /g; s/\[//g; s/\]//g; s/"//g')
      #       echo ${sourceAddressPrefixes}
      #       az network nsg rule update \
      #         --resource-group ${resourceGroup} \
      #         --nsg-name ${{ env.nsg }} \
      #         --name NRMS-Rule-101 \
      #         --source-address-prefixes $sourceAddressPrefixes \
      #         --destination-port-ranges 443 22

      # - name: Restart wls VM
      #   id: restart-wls-wm
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: ${{ env.azCliVersion }}
      #     inlineScript: |
      #       echo "restart vm to make sure security rule work."
      #       az vm restart -g ${resourceGroup} -n WebLogicServerVM
    
      # - name: Query public IP of WebLogic Server VM
      #   id: query-wls-machine-ip
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: ${{ env.azCliVersion }}
      #     inlineScript: |
      #       echo "query public ip"
      #       publicIP=$(az vm show \
      #         --resource-group ${resourceGroup} \
      #         --name WebLogicServerVM -d \
      #         --query publicIps -o tsv)
      #       echo "##[set-output name=publicIP;]${publicIP}"
      # - name: Create environment variable for WebLogic Server VM IP
      #   id: env-wls-machine-ip
      #   run: echo "wlsPublicIP=${{steps.query-wls-machine-ip.outputs.publicIP}}" >> $GITHUB_ENV
      
      # - name: Verify WebLogic Server
      #   id: verify-wls
      #   run: |
      #     echo "pubilc IP of wls machine:" ${wlsPublicIP}
      #     echo "test port..."
      #     timeout 6m sh -c 'until nc -zv $0 $1; do echo "nc rc: $?"; sleep 5; done' ${wlsPublicIP} 22
      #     echo "check if /u01/app/wls/install/oracle/middleware/oracle_home/wlserver/modules exists, the step will fail if not."
      #     echo install sshpass
      #     sudo apt-get install -y sshpass
      #     result=$(sshpass -p ${wlsPassword} -v ssh -p 22 -o StrictHostKeyChecking=no -o ConnectTimeout=1000 -v -tt weblogic@${wlsPublicIP} 'bash -s' < arm-oraclelinux-wls/test/scripts/verify-wls-path.sh)
      #     echo $result

      # - name: Delete Resource Group
      #   id: delete-resource-group
      #   if: always()
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: ${{ env.azCliVersion }}
      #     inlineScript: |
      #       echo "delete... " $resourceGroup
      #       az group delete --yes --no-wait --verbose --name $resourceGroup
